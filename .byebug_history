c
      expect(json_response).to include("markdown")
json_response
c
json_response
c
json_response
json_response["markdown"]
json_response
c
      json_response = JSON.parse(response.body)
response.body
response
c
{ markdown: generate_changelog_result[:data] }
generate_changelog_result[:data]
c
json
c
response.status
response
c
url
c
url
 c
c
url
repo_path
repo
c
  repo_path = repo[%r{github\.com/([\w.-]+/[\w.-]+)}, 1]
c
  repo_path = repo[%r{github\.com/([\w.-]+/[\w.-]+)}, 1]
repo
c
generate_changelog_result[:data]
c
repo
crepo
c
repo
from_sha
@repo
repo
c
json
c
commits_result
c
commits_result
c
commits_result[:data]
commits_result[:data]]
commits_result
c
commits_result
c
commits_result
c
C
        generate_changelog_result = Integrations::GenerateChangelogService.new(commits: commits).call
c
generate_changelog_result[:success]
        generate_changelog_result = Integrations::GenerateChangelogService.new(commits: commits).call
c
commits_result[:success]
commits
c
        commits = data['commits'] || []
commits_result[:data]
commits_result
commmits_result
c
response
changelog = JSON.parse(unescaped)
unescaped = content.gsub('\n', "\n").gsub('\"', '"')
        content = response.dig("choices", 0, "message", "content")
response
c
content = response.dig("choices", 0, "message", "content")
c
content
content = response.dig("choices", 0, "message", "content")
response
c
parsed_content = JSON.parse(content)
content = response.dig("choices", 0, "message", "content")
response
c
content = response.dig("choices", 0, "message", "content")
c
        parsed_content = JSON.parse(content)
        content = response.dig("choices", 0, "message", "content")
c
        parsed_content = JSON.parse(content)
        content = response.dig("choices", 0, "message", "content")
        parsed_content = JSON.parse(content)
parsed_content
prompt
        parsed_content = JSON.parse(content)
        content = response.dig("choices", 0, "message", "content")
c
content = response.dig("choices", 0, "message", "content")
response.dig("choices", 0, "message", "content")
response
c
response_body
q
response = client.chat(
          parameters: {
            model: "gpt-3.5-turbo", # Use a widely available model
            messages: [
              { role: "system", content: "You're a helpful changelog generator." },
              { role: "user", content: prompt } # Use the constructed prompt
            ],
            temperature: 0.7
          }
        )
response = client.chat(
c
x
response = client.chat(
          parameters: {
            model: "gpt-3.5-turbo", # Use a widely available model
            messages: [
              { role: "system", content: "You're a helpful changelog generator." },
              { role: "user", content: prompt } # Use the constructed prompt
            ],
            temperature: 0.7
          }
        )
prompt
response
c
response_bodyc
response_body
c
commits_text
c
commits
c
commits
commits_text
c
client
c
client.chat
client
c
C
c
client
c
client
c
commits
c
q
c
commits
commits.first
commits
commits.second
commits.last
commits.first
commits
c
commits[:data]
commits.first
commits
c
openai_key
c
summary = Integrations::GenerateChangelog.new(commits: commits).call
c
summary = Integrations::GenerateChangelog.new(commits: commits).call
c
summary = Integrations::GenerateChangelog.new(commits: commits).call
c
        summary = Integrations::GenerateChangelog.new(commits: commits).call
commits
c
params
params["from_sha"]
params[:from_sha]
params
commits
c
result[:data]['commits']
result[:data]
        commits = result['commits'] || []
        commits = response['commits'] || []
result[:success]
result[:success
result
c
result
c
result
c
C
params[:to_sha]
params["to_sha"]
params["to"]
c
params["to"]
params
c
params
 result = FetchCommitsJob.perform_later(params[:repo], params[:from_sha], params[:to_sha])
NameError (uninitialized constant Job):
Completed 500 Internal Server Error in 0ms (ActiveRecord: 0.0ms | Allocations: 136)
app/controllers/integrations/github_controller.rb:4:in `fetch_github_commits'  Parameters: {"from"=>"8ba3501cd9c982676fab35f1c8092302060d728c", "to"=>"56d0ddae18993eb696ab41d0fc5041948b88024a"}
NameError (uninitialized constant Job):
Completed 500 Internal Server Error in 0ms (ActiveRecord: 0.0ms | Allocations: 136)
  Parameters: {"from"=>"8ba3501cd9c982676fab35f1c8092302060d728c", "to"=>"56d0ddae18993eb696ab41d0fc5041948b88024a"}
Processing by Integrations::GithubController#fetch_github_commits as */*
Started GET "/integrations/github/fetch_github_commits?from=8ba3501cd9c982676fab35f1c8092302060d728c&to=56d0ddae18993eb696ab41d0fc5041948b88024a" for ::1 at 2025-07-15 16:49:37 -0700
capp/controllers/integrations/github_controller.rb:4:in `fetch_github_commits'
c
response_body.length
c
    json = JSON.parse(response.body)
assigns
response.status
response.body
response.response_body
response
c
response["commits"]
response["commits"].first
response.["commits"].first
response.parsed_response["commits"].first
response.parsed_response["commits"]
c
response.parsed_response["commits"]
response.parsed_response
response
url
commits
c
